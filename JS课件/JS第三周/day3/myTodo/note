### 分析页面html结构
- 标题区域
- 添加任务区域
- 任务列表区域
- 任务详情区域+全局遮罩；
### 安装第三方插件
- 一定要通过package.json来记录当前项目依赖的第三方插件的信息；这样，等别人down下你项目的时候，可以速度很快，同时，使用者，通过npm intall 自动安装当前项目依赖的第三方插件后，就能正常运行项目了
- npm install 可以简写为 npm i
    + 注意：一定要加--save 或--save-dev
    + --save :会把第三方插件保存到dependencies下--上线后的依赖
    + --save-dev:会把第三方插件保存到devDependencies下--开发过程中的依赖；
### 1:做项目前的基本准备
1、搭建项目的结构：html+css+js
2、npm init --y 以后可以记录依赖的第三方插件
3、搭建html页面结构
4、测试：给html引入js和css，测试页面引入正常
5、重置样式-normalize.css
### 2:专注的只写了css文件
### 3：专注的只写js文件；
- 拿到谁，给谁加什么事件，做什么事
- 需求：
    + 1：当点击事件发生的时候，把内容框的数据，存到客户端
    + 2：当页面加载成功的时候，从客户端拿到数据，根据数据的条数，决定渲染多少条task_item;
#### JS开发部分
- 在用闭包进行开发的时候，闭包前面一定要加;号；
1、 给表单添加submit事件，把数据存到客户端; store.set()
2、 当页面加载进来的时候，先从客户端取到数据；store.get()
    + 注意：永远不要用新数据，去覆盖老数据，我们只能给老数据中继续添加新数据；
3、 如果数据的长度为真的时候，我们就渲染页面；
    + 渲染页面：给页面绑定数据
    + 用了两种思路
        1、字符串拼接的方式
        2、动态创建 $('<div></div>')
        jquery中动态插入：
        ```
        //以下两个都是插入到容器的末尾，意思一样，只是主体元素不同
        $task_list.append(item)
        item.appendTo($task_list);
        ```
### 删除功能
- 必须先等数据都插入页面以后，才能获取"删除按钮"；
- 要有删除功能，必须找到当前容器对应的索引；所以，我们在动态绑定数据的时候，就必须给每个容器添加自定义属性index，存储正确的索引i;
- 当删除按钮的点击事件发生的时候，获取当前元素的容器的索引；通过索引干掉这个容器；--这样不能真正的删除，一刷新就又回来了；
    + 解决措施---不仅删除元素，还需要删除数据
    1、普通数据的数据
    2、通过数组更新客户端的数据
    3、重新获取客户端的数据，并重新渲染页面；






