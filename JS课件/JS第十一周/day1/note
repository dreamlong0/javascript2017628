### HTTP协议类
- HTTP协议的主要特点
    1、简单快速：每个资源即URI是固定的；想访问某个资源，只需要输入对应的URI即可；
    2、灵活：一个http协议，可以完成不同数据类型的传输
    3、无连接：我连接一次，他就会断掉，不会保持连接；
    4、无状态：客户端和服务端是两种身份，比如，客户端需要向服务端请求图片，http帮你建立连接，帮你中间传输；下次客户端再来，服务器不认识你，因为服务器没有记住你的状态；
- HTTP报文的组成部分
    http就是建立在TCP应用的；
    - 请求报文：请求行+请求头+空行+请求体
        请求行包括：http请求方法，页面地址，http协议以及版本；
            - 比如：GET / HTTP/1.1
        请求头：就是key,value值，来告诉服务端，我要哪些内容；要注意什么类型；
            - 从Host往下，都是请求头
        空行：就是告诉服务端，下一个不再是请求头了；它就该当作请求体来解析了；
    - 响应报文：状态行+响应头+空行+响应体
- HTTP方法
    - GET : 获取资源
    - POST: 传输资源
    - PUT: 更新资源
    - DELETE:删除资源：真正做业务类型的时候，一般不删除资源；
    - HEAD : 获得报文首部
- POST和GET的区别:重点
    1、get在浏览器回退时是无害的，而post会再次提交请求；*
    2、get产生的URL地址可以被收藏，而post不可以；
    3、get请求会被浏览器主动缓存，而post不会，除非手动设置；*
    4、get请求只能进行URL编码，而post支持多种编码方式
    5、get请求参数会被完整保留在浏览器历史记录里，而post中的参数不会被保留；*
    6、get请求在url地址中传输的参数是有长度限制的；而post没有限制；*
    7、对参数的数据类型，GET只接受ASCII字符，而post没有限制；
    8、GET比post更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息；*
    9、GET参数通过URL传递，而post放在request body中；*
- HTTP状态码
    1xx:指示信息-表示请求已接收，继续处理；
    2xx:成功-表示请求已被成功接收
        - 200 Ok:客户端请求成功
        - 206 Partial Content:客户端发送了一个带有Range头的GET请求，服务器完成了它；视频音频文件播放的时候，在播放到一半，返回206
    3xx:重定向-要完成请求必须进行更近一步的操作；
        - 301 Moved Permanently:所有的页面已经转移至新的URL--永久重定向
        - 302 Found：所有的页面已经临时转移至新的URL--临时重定向
        - 304 Not Modified:客户端有缓冲的文档，并发出了一个条件性的请求，服务端告诉客户，原来缓冲的文档还可以继续使用；
    4xx:客户端错误；
        - 400 Bad Request:客户端请求有语法错误，不能被服务器所理解
        - 401 Unauthorized:请求未经授权，这个状态码必须和WWW-Authenticate报头域一起使用
        - 403 forbidden：对被请求页面的访问被禁止
        - 404 not Found：请求资源不存在；
        - 500 Internal Server Error:服务器发生不可预期的错误，原来缓冲的文档还可以继续使用
        - 503 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常；
    5xx:服务端错误；
- 什么是持久连接
    HTTP协议采用"请求-答应"模式，当使用普通模式，即非keep-Alive模式时，每个请求／应答客户和服务器都新建一个连接，完成之后立即断开连接(HTTP协议为无连接的协议)
    当使用Keep-Alive模式(又称持久连接，连接重用)时，Keep-Alive功能使客户端到服务器端的连接持久有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或重新建立连接；
    HTTP1.1版本才支持，HTTP1.0版本不支持；

=============
### 字体图标
1、定义自己的字体：
```
@font-face{
    font-family:'随便起lei';
    src:url('相对地址') format(''),url('相对地址') format(''),url('相对地址') format(''),url('相对地址') format('')
}
```
2、给哪些元素使用该字体；
[class^='icon-'],[class*='icon-']{
    font-family:'lei',
    font-style:normal;
    font-size:40px;
}
3、通过伪元素，设置不同的内容，来显示不同的字体图标；
```
.icon-usd::before {
    content: "\e928";
}
```
















