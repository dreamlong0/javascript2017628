### 正则中的主要作用
- 匹配  reg.test()  因为匹配返回的是布尔值，所以，一般用在条件判断语句和返回值中；
- 捕获：reg.exec();
    + 主要的比较对象 str.match()
### 字符串的方法
- str.search(正则)
- str.split(正则)
- str.match(正则)
- str.replace(正则)
### 正则捕获有两大特性
- 懒惰性：用全局g来解决
- 贪婪行: 解决措施用?;
    + 在量词元字符后面加上?号
### 正则的属性
- reg.test()  匹配
- reg.exec()  捕获
- reg.global  判断是否有全局修饰符
- reg.lastIndex 从哪里开始查找，一定要加g，否则永远从0开始找；
- reg.toString()  把正则转为字符串
### ?的作用：
- 可有可无  ?
- 解决捕获时候的贪婪行; +?
- 只匹配，不捕获；  (?:)
### 正则捕获的方法 exec和match
- 一般情况下，返回值是一个长度为3的数组；如果有小分组的时候，小分组从索引为1开始依次往后累加；把找到内容的索引和原始字符串推到最后；
- 如果没有全局g，lastIndex永远从索引为0的时候开始找，加了全局g,lastIndex从找到内容的下一项内容的索引开始查找；
- exec和match的区别：
    + 有g:exec每次只能拿到一个符合条件的数组，但是可以有小分组；
    match可以拿到所有符合规则的内容，以一个新数组的形式返回；但是无法拿到小分组
    + 无g：exec和match拿到的值是一样的；
### 正则捕获的方法
1、exec
2、match
3、replace
### 重复子项
\1:代表跟第一个小分组一模一样；
\2:代表跟第二个小分组一模一样；

### 总结：
1、[]的注意事项
    + 中括中像.-_+等都没有特殊含义；如果放在小括号中 (\+)
    + 中括中不会出现两位数，只有一位数；
2、()的用法
    1、分组
    2、小分组：只想匹配，不想捕获 (?:xxx)
    3、提高优先级的作用
3、？
    1、可有可无  []?
    2、解决贪婪性，需要在量词后面+?
    3、只想匹配，不想捕获 (?:xxx)
4、 捕获，两大特性：1）懒惰性 g   2)贪婪性 (?:)
5、 必须熟练掌握 exec;

### 今晚的任务：
1、用exec封装match
2、去除首尾空格：封装str.trim()   str.trimLeft()  str.trimRight()
3、敏感词过滤
4、封装日期格式化  str.fromatDate()
5、求出现次数最多的单词以及出现多少次：
    + 对象：对象不重名，假设法 ，对象遍历；
    + 正则：1）字符串转数组，数组排序，数组转字符串   2）重复子项





